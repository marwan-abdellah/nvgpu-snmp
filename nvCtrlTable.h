/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 14170 $ of $
 *
 * $Id:$
 */
#ifndef NV_CTRL_TABLE_H
#define NV_CTRL_TABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(NV-CTRL-MIB)
config_require(NV-CTRL-MIB/nvCtrlTable/nvCtrlTable_interface)
config_require(NV-CTRL-MIB/nvCtrlTable/nvCtrlTable_data_access)
config_require(NV-CTRL-MIB/nvCtrlTable/nvCtrlTable_data_get)
    /* *INDENT-ON*  */

/* OID and column number definitions for nvCtrlTable */
#include "nvCtrlTable_oids.h"

/* enum definions */
#include "nvCtrlTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_nvCtrlTable(void);
void shutdown_nvCtrlTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table nvCtrlTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NV-CTRL-MIB::nvCtrlTable is subid 2 of nvCtrl.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.2021.13.42.2, length: 10
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review nvCtrlTable registration context.
     */
typedef netsnmp_data_list nvCtrlTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review nvCtrlTable data context structure.
 * This structure is used to represent the data for nvCtrlTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * nvCtrlTable.
 */
typedef struct nvCtrlTable_data_s {
    
        /*
         * nvCtrlProductName(2)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   nvCtrlProductName[255];
size_t      nvCtrlProductName_len; /* # of char elements, not bytes */
    
        /*
         * nvCtrlVBiosVersion(3)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   nvCtrlVBiosVersion[255];
size_t      nvCtrlVBiosVersion_len; /* # of char elements, not bytes */
    
        /*
         * nvCtrlNvidiaDriverVersion(4)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   nvCtrlNvidiaDriverVersion[255];
size_t      nvCtrlNvidiaDriverVersion_len; /* # of char elements, not bytes */
    
        /*
         * nvCtrlVersion(5)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   nvCtrlVersion[255];
size_t      nvCtrlVersion_len; /* # of char elements, not bytes */
    
        /*
         * nvCtrlBusType(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlBusType;
    
        /*
         * nvCtrlBusRate(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlBusRate;
    
        /*
         * nvCtrlVideoRam(8)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlVideoRam;
    
        /*
         * nvCtrlIrq(9)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlIrq;
    
        /*
         * nvCtrlGPUCoreTemp(10)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUCoreTemp;
    
        /*
         * nvCtrlGPUCoreThreshold(11)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUCoreThreshold;
    
        /*
         * nvCtrlGPUDefaultCoreThreshold(12)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUDefaultCoreThreshold;
    
        /*
         * nvCtrlGPUMaxCoreThreshold(13)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUMaxCoreThreshold;
    
        /*
         * nvCtrlGPUAmbientTemp(14)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUAmbientTemp;
    
        /*
         * nvCtrlGPUOverclockingState(15)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUOverclockingState;
    
        /*
         * nvCtrlGPU2DGPUClockFreq(16)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPU2DGPUClockFreq;
    
        /*
         * nvCtrlGPU2DMemClockFreq(17)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPU2DMemClockFreq;
    
        /*
         * nvCtrlGPU3DGPUClockFreq(18)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPU3DGPUClockFreq;
    
        /*
         * nvCtrlGPU3DMemClockFreq(19)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPU3DMemClockFreq;
    
        /*
         * nvCtrlGPUDefault2DGPUClockFreq(20)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUDefault2DGPUClockFreq;
    
        /*
         * nvCtrlGPUDefault2DMemClockFreq(21)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUDefault2DMemClockFreq;
    
        /*
         * nvCtrlGPUDefault3DGPUClockFreq(22)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUDefault3DGPUClockFreq;
    
        /*
         * nvCtrlGPUDefault3DMemClockFreq(23)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUDefault3DMemClockFreq;
    
        /*
         * nvCtrlGPUCurrentGPUClockFreq(24)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUCurrentGPUClockFreq;
    
        /*
         * nvCtrlGPUCurrentMemClockFreq(25)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPUCurrentMemClockFreq;
    
} nvCtrlTable_data;


/*
 * TODO:120:r: |-> Review nvCtrlTable mib index.
 * This structure is used to represent the index for nvCtrlTable.
 */
typedef struct nvCtrlTable_mib_index_s {

        /*
         * nvCtrlGPU(1)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   nvCtrlGPU;


} nvCtrlTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review nvCtrlTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_nvCtrlTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review nvCtrlTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * nvCtrlTable_rowreq_ctx pointer.
 */
typedef struct nvCtrlTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_nvCtrlTable_IDX_LEN];
    
    nvCtrlTable_mib_index        tbl_idx;
    
    nvCtrlTable_data              data;
    unsigned int                column_exists_flags; /* flags for existence */

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to nvCtrlTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *nvCtrlTable_data_list;

} nvCtrlTable_rowreq_ctx;

typedef struct nvCtrlTable_ref_rowreq_ctx_s {
    nvCtrlTable_rowreq_ctx *rowreq_ctx;
} nvCtrlTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int nvCtrlTable_pre_request(nvCtrlTable_registration * user_context);
    int nvCtrlTable_post_request(nvCtrlTable_registration * user_context,
        int rc);


    nvCtrlTable_rowreq_ctx *
                  nvCtrlTable_row_find_by_mib_index(nvCtrlTable_mib_index *mib_idx);

extern oid nvCtrlTable_oid[];
extern int nvCtrlTable_oid_size;


#include "nvCtrlTable_interface.h"
#include "nvCtrlTable_data_access.h"
#include "nvCtrlTable_data_get.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* NV_CTRL_TABLE_H */
/** @} */
